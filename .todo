+ `get_block`
+ `get_block_info`

- `get_block_header_state`

```json
  "active_schedule": {
    "version": 2085,
    "producers": [
      {
        "producer_name": "atticlabeosb",
        "authority": [
          0,
          {
            "threshold": 1,
            "keys": [
              {
                "key": "EOS7PfA3A4UdfMu2wKbuXdbHn8EWAxbMnFoFWui4X2zsr2oPwdQJP",
                "weight": 1
              }
            ]
          }
        ]

```

Github Issue opened here: https://github.com/eosnetworkfoundation/docs/issues/215

Solution, if denied:
  - implement like this for vector with elements of different data types.
```rust
struct CustomType {
    field1: i32,
    field2: String,
}

enum Element {
    U32(u32),
    Custom(CustomType),
}

fn main() {
    let element1 = Element::U32(42);
    let element2 = Element::Custom(CustomType {
        field1: 1,
        field2: String::from("example"),
    });

    let list: Vec<Element> = vec![element1, element2];

    for element in list {
        match element {
            Element::U32(value) => println!("u32: {}", value),
            Element::Custom(custom) => println!("CustomType: {{ field1: {}, field2: {} }}", custom.field1, custom.field2),
        }
    }
}
```

---

- `push_transaction`
- `send_transaction`

- create macros for common functions

+ may have to move all the data types into 1 common file - `types.rs`.
- add mainnet, testnet (jungle, ...) as different networks available to connect to.
> Till then, just connect with `.env` file.

- Reconsider the visibility of function, struct params. Change to `pub(crate)`, `pub`.

+ move code from `src2/main.rs` to `get_info.rs` file & make it work.
+ add status code check for different status codes, otherwise it doesn't log any errors in case of wrong status code.
+ add `examples/` folder to `Cargo.toml` as a workspace.
+ convert `src/main.rs` to a lib crate.
